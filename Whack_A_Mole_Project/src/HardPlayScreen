/**
 * This is our play screen for the hard difficulty, the user can pause and return to menu using the pause button
 */
//import necessary packages
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

@SuppressWarnings("serial")
public class HardPlayScreen extends ScreenFrame implements ActionListener{
	public static int points = 0, timeLeft = 60;
	private ImageIcon bg;
	private JLabel headingLabel;
	private JPanel headingPanel;
	private JPanel grid;
	private final Color HARDPLAY_COLOR_FG = Color.blue, HARDPLAY_COLOR_BG = Color.cyan; //constant colors of difficulty button foreground and background respectively
	private final Font HARDPLAY_FONT = new Font("Comic Sans MS", Font.PLAIN, 25); //constant font of difficulty buttons
	Mole[] moles = new Mole[16];
	int time = 60;
	JButton jbtPause;
	
	//Constructor for HardPlayScreen:
	HardPlayScreen(){
	

			bg = new ImageIcon("images/bgPlay.jpg");

			headingLabel = addCustomLabel("     Easy: Score: " + points + "     Time left: " + timeLeft + " seconds", Color.cyan, new Font("Comic Sans MS", Font.BOLD, 35));
			headingPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
			headingPanel.setBackground(BG_COLOR);
			jbtPause = addCustomButton("||", 10, 10, 75, 75, HARDPLAY_COLOR_FG, HARDPLAY_COLOR_BG, HARDPLAY_FONT);
			jbtPause.addActionListener(this); //register action listener
			headingPanel.add(jbtPause);
			headingPanel.add(headingLabel);
			this.add(headingPanel, BorderLayout.NORTH);
			
			grid = new PaintPanel();
			grid.setLayout(null);
			for(int i = 0; i < moles.length; i++) {
				moles[i] = new Mole();
				moles[i].addActionListener(this);
				grid.add(moles[i]);
			}
			moles[0].setBounds(100, 110, 100, 90);
			moles[1].setBounds(300, 110, 100, 90);
			moles[2].setBounds(500, 110, 100, 90);
			moles[3].setBounds(700, 110, 100, 90);
			moles[4].setBounds(150, 260, 100, 90);
			moles[5].setBounds(350, 260, 100, 90);
			moles[6].setBounds(550, 260, 100, 90);
			moles[7].setBounds(750, 260, 100, 90);
			moles[8].setBounds(100, 410, 100, 90);
			moles[9].setBounds(300, 410, 100, 90);
			moles[10].setBounds(500, 410, 100, 90);
			moles[11].setBounds(700, 410, 100, 90);
			moles[12].setBounds(150, 560, 100, 90);
			moles[13].setBounds(350, 560, 100, 90);
			moles[14].setBounds(550, 560, 100, 90);
			moles[15].setBounds(750, 560, 100, 90);

			this.add(grid, BorderLayout.CENTER);
	        
			//pre-set some moles
	        moles[4].setUp();
	        moles[7].setUp();
	        moles[2].setUp();

		}

		@Override
		public void actionPerformed(ActionEvent e) {
			if(e.getSource() == jbtPause) {
				new PauseScreen();
			}
			else {
				for(int i = 0; i < 9; i++) {
					if(e.getSource() == moles[i] && moles[i].isUp) {
						points++;
						int hole;
						do {
							hole = (int)(Math.random() * 9);
						}while(moles[hole].isUp); //keep generating random holes if the mole on that hole is already up (no duplicates)
						moles[hole].setUp();
						moles[i].setDown();
						headingLabel.setText("     EASY: Score: " + points + "     Time left: " + timeLeft + " seconds");
						break;
					}
				}
			}
		}

		/*
		 * This class is a canvas that draws the background image. All components are added to this Panel, then the
		 * PaintPanel is added to the JFrame.
		 */
		class PaintPanel extends JPanel{
			protected void paintComponent(Graphics g){
				super.paintComponent(g); //override the paintComponent method
				//draw the background image
				g.drawImage(bg.getImage(),0,0,this.getWidth(),this.getHeight(),null);
			}//end of paintComponent method
		}
}
